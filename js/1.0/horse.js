function QueryString(item){    var svalue = self.location.search.match(new RegExp("[\?\&]" + item + "=([^\&]*)(\&?)", "i"));    return svalue ? svalue[1] : svalue;}var domain = QueryString("domain");try {    document.domain = domain} catch (e) {}var p = window.parent;window.l = (function(){    var distance = 13, ori = 13, xhr, url, data, events = [], timer, ie6 = navigator.userAgent.indexOf("MSIE 6") >= 0, retry = true, running = false, C, serverDomain = domain, type = "GET";    function getxhr(){        return window.ActiveXObject ? (ie6 ? new ActiveXObject("Msxml2.XMLHTTP") : new ActiveXObject("Microsoft.XMLHTTP")) : new XMLHttpRequest();    }    function httpData(obj){        var s = [];        for (var m in obj) {            s.push( encodeURIComponent(m) + '=' + encodeURIComponent(obj[m]) )        }		return s.join("&").replace(/%20/g, "+")    }    function httpSuccess(){        try {            return (xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || xhr.status == 1223;        }         catch (e) {        }        return false;    }    function onreadystatechange(){        if (xhr && xhr.readyState == 4) {            retry = true;            if (httpSuccess()) {                success();            }            else                 error();            complete();        }    }    function complete(){        running = false;        try {            l.connect();        }         catch (e) {        }    }    function error(){        if (C.error)             C.error();        distance = Math.min(2 * distance, 60000);    }    function success(){        distance = ori || 13;        var evt;        try {            evt = eval("(" + (xhr.responseText || "[]") + ')');        }         catch (e) {        }        evt = evt || [];        if (evt.length > 0) {            for (var i = 0; i < evt.length; i++) {                if (C.check(evt[i]))                     l.stop();                events.push(evt[i]);                setTimeout(handIn, 0);            }        }        else             if (C.first) {                C.accept();            }    }    function handIn(){		if ( C && C.accept )        	C.accept(events.shift());    }    return {        connect: function(){            if (retry) {                timer = setTimeout(l.start, distance);            }        },        init: function(farm, connect, param){            C = farm;            url = connect;            data = httpData(param);            return this;        },        start: function(){            if (!running) {                running = true;                if (!xhr) {                    xhr = getxhr();                }                xhr.open(type, url + "?_=" + (+new Date()) + "&domain=" + serverDomain + "&" + data, true);                xhr.onreadystatechange = onreadystatechange;                try {                    xhr.send(null);                }                 catch (e) {                    error();                    complete();                }            }        },        setData: function(obj){            data = httpData(obj);        },        stop: function(){            if (timer) {                clearTimeout(timer);            }            retry = false;            if (xhr) {                try {                    xhr.abort()                }                 catch (e) {                }                xhr = null;            }            running = false;        }    }})();